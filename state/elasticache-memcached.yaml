---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: ElastiCache memcached, a cloudonaut.io template, sponsored by https://github.com/ngault'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentClientStack
      - ParentZoneStack
      - ParentSSHBastionStack
      - ParentAlertStack
    - Label:
        default: 'ElastiCache Parameters'
      Parameters:
      - EngineVersion
      - CacheNodeType
      - NumCacheNodes
      - SubDomainNameWithDot
    - Label:
        default: 'Operational Parameters'
      Parameters:
      - LogsRetentionInDays
    - Label:
        default: 'Permission Parameters'
      Parameters:
      - PermissionsBoundary
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentClientStack:
    Description: 'Stack name of parent client stack based on state/client-sg.yaml template.'
    Type: String
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/vpc-zone-*.yaml template.'
    Type: String
    Default: ''
  ParentSSHBastionStack:
    Description: 'Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-*-bastion.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  PermissionsBoundary:
    Description: 'Optional ARN for a policy that will be used as the permission boundary for all roles created by this template.'
    Type: String
    Default: ''
  EngineVersion:
    Description: 'memcached version'
    Type: String
    AllowedValues: ['1.6.17', '1.6.12', '1.6.6', '1.5.16', '1.5.10', '1.4.34'] # aws elasticache describe-cache-engine-versions --engine memcached --query "CacheEngineVersions[].EngineVersion"
  CacheNodeType:
    Description: 'The compute and memory capacity of the nodes in the node group (shard).'
    Type: 'String'
    Default: 'cache.t2.micro'
  NumCacheNodes:
    Description: 'The initial number of cache nodes that the cluster has.'
    Type: 'Number'
    Default: 1
  SubDomainNameWithDot:
    Description: 'Name that is used to create the DNS entry with trailing dot, e.g. ยง{SubDomainNameWithDot}ยง{HostedZoneName}. Leave blank for naked (or apex and bare) domain. Requires ParentZoneStack parameter!'
    Type: String
    Default: 'memcached.'
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Mappings:
  EngineVersionMap:
    '1.6.17':
      CacheParameterGroupFamily: 'memcached1.6'
    '1.6.12':
      CacheParameterGroupFamily: 'memcached1.6'
    '1.6.6':
      CacheParameterGroupFamily: 'memcached1.6'
    '1.5.16':
      CacheParameterGroupFamily: 'memcached1.5'
    '1.5.10':
      CacheParameterGroupFamily: 'memcached1.5'
    '1.4.34':
      CacheParameterGroupFamily: 'memcached1.4'
Conditions:
  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, '']]
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasSingleCacheNode: !Equals [!Ref NumCacheNodes, '1']
Resources:
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      Name: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      ResourceRecords:
      - !GetAtt 'CacheCluster.ConfigurationEndpoint.Address'
      TTL: 60
      Type: CNAME
  CacheParameterGroupName:
    Type: 'AWS::ElastiCache::ParameterGroup'
    Properties:
      CacheParameterGroupFamily: !FindInMap [EngineVersionMap, !Ref EngineVersion, CacheParameterGroupFamily]
      Description: !Ref 'AWS::StackName'
      Properties: {}
  CacheSubnetGroupName:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      SubnetIds: !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPrivate'}]
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 11211
        ToPort: 11211
        SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}
  SecurityGroupInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'}
  CacheCluster:
    # DeletionPolicy: Snapshot # Snapshot not supported by memcached (only Redis)
    # UpdateReplacePolicy: Snapshot # Snapshot not supported by memcached (only Redis)
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      AutoMinorVersionUpgrade: true
      AZMode: !If [HasSingleCacheNode, 'single-az', 'cross-az']
      CacheNodeType: !Ref CacheNodeType
      CacheParameterGroupName: !Ref CacheParameterGroupName
      CacheSubnetGroupName: !Ref CacheSubnetGroupName
      Engine: memcached
      EngineVersion: !Ref EngineVersion
      NotificationTopicArn: !If [HasAlertTopic, {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}, !Ref 'AWS::NoValue']
      NumCacheNodes: !Ref NumCacheNodes
      PreferredAvailabilityZones: !Split [',', !GetAtt 'PreferredAvailabilityZonesSelector.PreferredAvailabilityZones']
      PreferredMaintenanceWindow: 'sat:07:00-sat:08:00'
      VpcSecurityGroupIds:
      - !Ref SecurityGroup
  ClusterCPUUtilizationTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      AlarmDescription: 'Average CPU utilization over last 10 minutes too high.'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: CacheClusterId
        Value: !Ref CacheCluster
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: 'AWS/ElastiCache'
      OKActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Period: 600
      Statistic: Average
      Threshold: 80
  ClusterSwapUsageTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      AlarmDescription: 'Average swap usage over last 10 minutes too high, performance may suffer.'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: CacheClusterId
        Value: !Ref CacheCluster
      EvaluationPeriods: 1
      MetricName: SwapUsage
      Namespace: 'AWS/ElastiCache'
      OKActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Period: 600
      Statistic: Average
      Threshold: 256000000 # 256 Megabyte in Byte
  ClusterEvictionsTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      AlarmDescription: 'Evictions over last 10 minutes too high, memory may to less for all keys.'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: CacheClusterId
        Value: !Ref CacheCluster
      EvaluationPeriods: 10
      MetricName: Evictions
      Namespace: 'AWS/ElastiCache'
      OKActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Period: 60
      Statistic: Sum
      Threshold: 1000
  CustomResourceLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundary, !Ref 'AWS::NoValue']
  CustomResourceLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
      - !Ref CustomResourceLambdaRole
      PolicyName: lambda
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !GetAtt 'CustomResourceLambdaLogGroup.Arn'
  CustomResourceLambdaFunction: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          exports.handler = (event, context, cb) => {
            const nodes = parseInt(event.ResourceProperties.NumCacheNodes, 10);
            const azs = event.ResourceProperties.AvailabilityZones.split(',');
            const preferredAZs = Array(nodes).fill('').map((v, i) => azs[i % azs.length]);
            response.send(event, context, response.SUCCESS, {
              PreferredAvailabilityZones: preferredAZs.join(',')
            }, event.LogicalResourceId);
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'CustomResourceLambdaRole.Arn'
      Runtime: 'nodejs22.x'
      Timeout: 60
  CustomResourceLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CustomResourceLambdaFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  PreferredAvailabilityZonesSelector:
    Type: 'Custom::PreferredAvailabilityZonesSelector'
    DependsOn:
    - CustomResourceLambdaLogGroup
    - CustomResourceLambdaPolicy
    Version: '1.0'
    Properties:
      NumCacheNodes: !Ref NumCacheNodes
      AvailabilityZones: !Join [',', !GetAZs '']
      ServiceToken: !GetAtt 'CustomResourceLambdaFunction.Arn'
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'state/elasticache-memcached'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  ClusterName:
    Description: 'The name of the cluster'
    Value: !Ref CacheCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
  DNSName:
    Description: 'he DNS address of the configuration endpoint for the Memcached cache cluster.'
    Value: !GetAtt 'CacheCluster.ConfigurationEndpoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  SecurityGroupId:
    Description: 'The security group used to manage access to Elasticache Memcached.'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
