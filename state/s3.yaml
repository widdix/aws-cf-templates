---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: S3 bucket, a cloudonaut.io template, sponsored by https://github.com/ngault'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentKmsKeyStack
      - ParentS3VirusScanStack
      - ParentVpcEndpointStack
      - ParentS3StackAccessLog
    - Label:
        default: 'S3 Parameters'
      Parameters:
      - BucketName
      - Access
      - Versioning
      - NoncurrentVersionExpirationInDays
      - ExpirationInDays
      - ExpirationPrefix
    - Label:
        default: 'Lambda Parameters'
      Parameters:
      - LambdaFunctionArn
      - LambdaFunctionEvent
      - LambdaFunctionFilterPrefix
    - Label:
        default: 'Operational Parameters'
      Parameters:
      - LogsRetentionInDays
    - Label:
        default: 'Permission Parameters'
      Parameters:
      - PermissionsBoundary
Parameters:
  ParentKmsKeyStack:
    Description: 'Optional Stack name of parent KMS key stack based on security/kms-key.yaml template.'
    Type: String
    Default: ''
  ParentS3VirusScanStack:
    Description: 'Optional stack name of parent Antivirus for Amazon S3 stack based on https://github.com/widdix/aws-s3-virusscan template.'
    Type: String
    Default: ''
  ParentVpcEndpointStack:
    Description: 'Optional Stack name of parent VPC endpoint stack based on vpc/vpc-endpoint-s3.yaml template (Required if Access := VpcEndpointRead).'
    Type: String
    Default: ''
  ParentS3StackAccessLog:
    Description: 'Optional stack name of parent s3 stack based on state/s3.yaml template (with Access set to S3AccessLogWrite) to store access logs.'
    Type: String
    Default: ''
  BucketName:
    Description: 'Optional name of the bucket.'
    Type: String
    Default: ''
  Access:
    Description: 'Access policy of the bucket.'
    Type: String
    Default: Private
    AllowedValues: [Private, PublicRead, PublicWrite, PublicReadAndWrite, CloudFrontRead, CloudFrontAccessLogWrite, ElbAccessLogWrite, ElbAccessLogWriteEncrypted, S3AccessLogWrite, ConfigWrite, CloudTrailWrite, VpcEndpointRead, FlowLogWrite]
  Versioning:
    Description: 'Enable versioning to keep a backup if objects change.'
    Type: String
    Default: true
    AllowedValues: [true, false, 'false-but-was-true']
  RestrictCustomerKeys:
    Description: 'Block the use of SSE-C encryption (https://aws.amazon.com/blogs/security/preventing-unintended-encryption-of-amazon-s3-objects/).'
    Type: String
    Default: true
    AllowedValues: [true, false]
  NoncurrentVersionExpirationInDays:
    Description: 'Remove noncurrent object versions after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  ExpirationInDays:
    Description: 'Remove objects after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  ExpirationPrefix:
    Description: 'Optional key prefix for expiring objects.'
    Type: String
    Default: ''
  LambdaFunctionArn:
    Description: 'Optional ARN of the AWS Lambda function that S3 invokes when the specified event type occurs.'
    Type: 'String'
    Default: ''
  LambdaFunctionEvent:
    Description: 'S3 bucket event for which to invoke the AWS Lambda function.'
    Type: 'String'
    Default: 's3:ObjectCreated:*'
    AllowedValues:
    - 's3:ObjectCreated:*'
    - 's3:ObjectCreated:Put'
    - 's3:ObjectCreated:Post'
    - 's3:ObjectCreated:Copy'
    - 's3:ObjectCreated:CompleteMultipartUpload'
    - 's3:ObjectRemoved:*'
    - 's3:ObjectRemoved:Delete'
    - 's3:ObjectRemoved:DeleteMarkerCreated'
    - 's3:ObjectRestore:Post'
    - 's3:ObjectRestore:Completed'
    - 's3:ReducedRedundancyLostObject'
    - 's3:Replication:OperationFailedReplication'
    - 's3:Replication:OperationMissedThreshold'
    - 's3:Replication:OperationReplicatedAfterThreshold'
    - 's3:Replication:OperationNotTracked'
  LambdaFunctionFilterPrefix:
    Description: 'Optional preifx filter for which to invoke the AWS Lambda function (leave empty for no filter).'
    Type: String
    Default: ''
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  PermissionsBoundary:
    Description: 'Optional ARN for a policy that will be used as the permission boundary for all roles created by this template.'
    Type: String
    Default: ''
Conditions:
  HasKmsKey: !Not [!Equals [!Ref ParentKmsKeyStack, '']]
  HasS3Bucket: !Not [!Equals [!Ref ParentS3StackAccessLog, '']]
  HasS3VirusScan: !Not [!Equals [!Ref ParentS3VirusScanStack, '']]
  HasPrivateAccess: !Equals [!Ref Access, Private]
  HasPublicReadAccess: !Or [!Equals [!Ref Access, PublicRead], !Equals [!Ref Access, PublicReadAndWrite]]
  HasPublicWriteAccess: !Or [!Equals [!Ref Access, PublicWrite], !Equals [!Ref Access, PublicReadAndWrite]]
  HasCloudFrontReadAccess: !Equals [!Ref Access, CloudFrontRead]
  HasCloudFrontAccessLogWrite: !Equals [!Ref Access, CloudFrontAccessLogWrite]
  HasElbAccessLogWriteAccess: !Or [!Equals [!Ref Access, ElbAccessLogWrite], !Equals [!Ref Access, ElbAccessLogWriteEncrypted]]
  # The only server-side encryption option that's supported is Amazon S3-managed keys (SSE-S3).
  HasElbAccessLogWriteEncrypted: !Equals [!Ref Access, ElbAccessLogWriteEncrypted]
  HasS3AccessLogWrite: !Equals [!Ref Access, S3AccessLogWrite]
  HasConfigWriteAccess: !Equals [!Ref Access, ConfigWrite]
  HasCloudTrailWriteAccess: !Equals [!Ref Access, CloudTrailWrite]
  HasVpcEndpointReadAccess: !Equals [!Ref Access, VpcEndpointRead]
  HasFlowLogWriteAccess: !Equals [!Ref Access, FlowLogWrite]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HadVersioning: !Equals [!Ref Versioning, 'false-but-was-true']
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  HasExpirationInDays: !Not [!Equals [!Ref ExpirationInDays, 0]]
  HasExpirationPrefix: !Not [!Equals [!Ref ExpirationPrefix, '']]
  HasPrivateAccessAndKmsKey: !And [!Condition HasPrivateAccess, !Condition HasKmsKey]
  HasPartitionPublic: !Equals [!Ref 'AWS::Partition', 'aws']
  HasPartitionChina: !Equals [!Ref 'AWS::Partition', 'aws-cn']
  HasPartitionUsGov: !Equals [!Ref 'AWS::Partition', 'aws-us-gov']
  HasLambdaFunctionArn: !Not [!Equals [!Ref LambdaFunctionArn, '']]
  HasLambdaFunctionFilterPrefix: !Not [!Equals [!Ref LambdaFunctionFilterPrefix, '']]
  HasBlockPublicAccess: !Not [!Or [!Condition HasPublicReadAccess, !Condition HasPublicWriteAccess]]
  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, '']]
  HasBucketOwnerPreferred: !Or [!Condition HasCloudFrontAccessLogWrite, !Condition HasS3AccessLogWrite, !Not [!Condition HasBlockPublicAccess]]
  HasRestrictCustomerKeys: !Equals [!Ref RestrictCustomerKeys, 'true']
Resources:
  Bucket: # cannot be deleted with data
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      LoggingConfiguration: !If [HasS3Bucket, {DestinationBucketName: {'Fn::ImportValue': !Sub '${ParentS3StackAccessLog}-BucketName'}, LogFilePrefix: !Ref 'AWS::StackName'}, !Ref 'AWS::NoValue']
      AccessControl: !If [HasS3AccessLogWrite, LogDeliveryWrite, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
        - ExpiredObjectDeleteMarker: true
          Status: Enabled
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
        - ExpirationInDays: !If [HasExpirationInDays, !Ref ExpirationInDays, 1]
          Prefix: !If [HasExpirationPrefix, !Ref ExpirationPrefix, !Ref 'AWS::NoValue']
          Status: !If [HasExpirationInDays, Enabled, Disabled]
      NotificationConfiguration:
        LambdaConfigurations:
        - !If [HasLambdaFunctionArn, {Event: !Ref LambdaFunctionEvent, Function: !Ref LambdaFunctionArn, Filter: !If [HasLambdaFunctionFilterPrefix, {S3Key: {Rules: [{Name: prefix, Value: !Ref LambdaFunctionFilterPrefix}]}}, !Ref 'AWS::NoValue']}, !Ref 'AWS::NoValue']
        QueueConfigurations:
        - !If [HasS3VirusScan, {Event: 's3:ObjectCreated:*', Queue: {'Fn::ImportValue': !Sub '${ParentS3VirusScanStack}-ScanQueueArn'}}, !Ref 'AWS::NoValue']
      OwnershipControls: !If [HasBucketOwnerPreferred, {Rules: [{ObjectOwnership: BucketOwnerPreferred}]}, {Rules: [{ObjectOwnership: BucketOwnerEnforced}]}]
      PublicAccessBlockConfiguration: !If [HasBlockPublicAccess, {BlockPublicAcls: true, BlockPublicPolicy: true, IgnorePublicAcls: true, RestrictPublicBuckets: true}, {BlockPublicAcls: true, BlockPublicPolicy: false, IgnorePublicAcls: true, RestrictPublicBuckets: false}] # AWS Foundational Security Best Practices v1.0.0 S3.8
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - !If [HasKmsKey, {BucketKeyEnabled: true, ServerSideEncryptionByDefault: {KMSMasterKeyID: {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}-KeyArn'}, SSEAlgorithm: 'aws:kms'}}, {ServerSideEncryptionByDefault: {SSEAlgorithm: 'AES256'}}]
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource:
          - !GetAtt 'Bucket.Arn'
          - !Sub '${Bucket.Arn}/*'
          Condition:
            Bool:
              'aws:SecureTransport': false
        - !If
          - HasRestrictCustomerKeys
          - Sid: RestrictSSECObjectUploads # https://aws.amazon.com/blogs/security/preventing-unintended-encryption-of-amazon-s3-objects/
            Principal: '*'
            Action: 's3:PutObject'
            Effect: Deny
            Resource: !Sub '${Bucket.Arn}/*'
            Condition:
              'Null':
                's3:x-amz-server-side-encryption-customer-algorithm': 'false'
          - !Ref 'AWS::NoValue'
        - !If
          - HasPrivateAccessAndKmsKey
          - Principal: '*'
            Action: 's3:PutObject*'
            Effect: Deny
            Resource: !Sub '${Bucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption':
                - 'AES256'
                - 'aws:kms'
                's3:x-amz-server-side-encryption-aws-kms-key-id': {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}-KeyArn'}
          - !Ref 'AWS::NoValue'
        - !If
          - HasPublicReadAccess
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasPublicWriteAccess
          - Principal: '*'
            Action: 's3:PutObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasPublicWriteAccess
          - Principal: '*'
            Action: 's3:GetBucketAcl'
            Effect: Allow
            Resource: !GetAtt 'Bucket.Arn'
          - !Ref 'AWS::NoValue'
        - !If
          - HasCloudFrontReadAccess
          - Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasElbAccessLogWriteAccess
          - Principal:
              AWS: # https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html
              - !If [HasPartitionPublic, 'arn:aws:iam::127311923021:root', !Ref 'AWS::NoValue'] # us-east-1
              - !If [HasPartitionPublic, 'arn:aws:iam::033677994240:root', !Ref 'AWS::NoValue'] # us-east-2
              - !If [HasPartitionPublic, 'arn:aws:iam::027434742980:root', !Ref 'AWS::NoValue'] # us-west-1
              - !If [HasPartitionPublic, 'arn:aws:iam::797873946194:root', !Ref 'AWS::NoValue'] # us-west-2
              - !If [HasPartitionPublic, 'arn:aws:iam::985666609251:root', !Ref 'AWS::NoValue'] # ca-central-1
              - !If [HasPartitionPublic, 'arn:aws:iam::054676820928:root', !Ref 'AWS::NoValue'] # eu-central-1
              - !If [HasPartitionPublic, 'arn:aws:iam::156460612806:root', !Ref 'AWS::NoValue'] # eu-west-1
              - !If [HasPartitionPublic, 'arn:aws:iam::652711504416:root', !Ref 'AWS::NoValue'] # eu-west-2
              - !If [HasPartitionPublic, 'arn:aws:iam::009996457667:root', !Ref 'AWS::NoValue'] # eu-west-3
              - !If [HasPartitionPublic, 'arn:aws:iam::897822967062:root', !Ref 'AWS::NoValue'] # eu-north-1
              - !If [HasPartitionPublic, 'arn:aws:iam::582318560864:root', !Ref 'AWS::NoValue'] # ap-northeast-1
              - !If [HasPartitionPublic, 'arn:aws:iam::600734575887:root', !Ref 'AWS::NoValue'] # ap-northeast-2
              - !If [HasPartitionPublic, 'arn:aws:iam::383597477331:root', !Ref 'AWS::NoValue'] # ap-northeast-3
              - !If [HasPartitionPublic, 'arn:aws:iam::114774131450:root', !Ref 'AWS::NoValue'] # ap-southeast-1
              - !If [HasPartitionPublic, 'arn:aws:iam::783225319266:root', !Ref 'AWS::NoValue'] # ap-southeast-2
              - !If [HasPartitionPublic, 'arn:aws:iam::718504428378:root', !Ref 'AWS::NoValue'] # ap-south-1
              - !If [HasPartitionPublic, 'arn:aws:iam::507241528517:root', !Ref 'AWS::NoValue'] # sa-east-1
              - !If [HasPartitionUsGov, 'arn:aws-us-gov:iam::048591011584:root', !Ref 'AWS::NoValue'] # us-gov-west-1*
              - !If [HasPartitionUsGov, 'arn:aws-us-gov:iam::190560391635:root', !Ref 'AWS::NoValue'] # us-gov-east-1*
              - !If [HasPartitionChina, 'arn:aws-cn:iam::638102146993:root', !Ref 'AWS::NoValue'] # cn-north-1*
              - !If [HasPartitionChina, 'arn:aws-cn:iam::037604701340:root', !Ref 'AWS::NoValue'] # cn-northwest-1*
            Action: 's3:PutObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasElbAccessLogWriteAccess
          - Principal:
              Service: 'delivery.logs.amazonaws.com' # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html and https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-access-logs.html
            Action: 's3:PutObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
          - !Ref 'AWS::NoValue'
        - !If
          - HasElbAccessLogWriteAccess
          - Principal:
              Service: 'delivery.logs.amazonaws.com' # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html and https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-access-logs.html
            Action: 's3:GetBucketAcl'
            Effect: Allow
            Resource: !GetAtt 'Bucket.Arn'
          - !Ref 'AWS::NoValue'
        - !If
          - HasElbAccessLogWriteEncrypted
          - Principal: '*'
            Action: 's3:PutObject*'
            Effect: Deny
            Resource: !Sub '${Bucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'AES256' # https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingServerSideEncryption.html
          - !Ref 'AWS::NoValue'
        - !If
          - HasConfigWriteAccess
          - Effect: Allow
            Principal:
              Service: 'config.amazonaws.com'
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt 'Bucket.Arn'
          - !Ref 'AWS::NoValue'
        - !If
          - HasConfigWriteAccess
          - Effect: Allow
            Principal:
              Service: 'config.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
          - !Ref 'AWS::NoValue'
        - !If
          - HasCloudTrailWriteAccess
          - Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt 'Bucket.Arn'
          - !Ref 'AWS::NoValue'
        - !If
          - HasCloudTrailWriteAccess
          - Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
          - !Ref 'AWS::NoValue'
        - !If
          - HasVpcEndpointReadAccess
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*'
            Condition:
              StringEquals:
                'aws:sourceVpce': {'Fn::ImportValue': !Sub '${ParentVpcEndpointStack}-EndpointS3'}
          - !Ref 'AWS::NoValue'
        - !If
          - HasFlowLogWriteAccess
          - Sid: AWSLogDeliveryWrite # https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-s3.html#flow-logs-s3-permissions
            Effect: Allow
            Principal:
              Service: 'delivery.logs.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
          - !Ref 'AWS::NoValue'
        - !If
          - HasFlowLogWriteAccess
          - Sid: AWSLogDeliveryAclCheck # https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-s3.html#flow-logs-s3-permissions
            Effect: Allow
            Principal:
              Service: 'delivery.logs.amazonaws.com'
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt 'Bucket.Arn'
          - !Ref 'AWS::NoValue'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Bucket
  LambdaRole:
    Condition: HasCloudFrontAccessLogWrite
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundary, !Ref 'AWS::NoValue']
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 's3:PutBucketAcl'
            - 's3:GetBucketAcl'
            Resource: '*' # We can not !GetAtt 'Bucket.Arn' because we need acces to the old and new bucket when the bucket is replaced!
  LambdaPolicy:
    Condition: HasCloudFrontAccessLogWrite
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
      - !Ref LambdaRole
      PolicyName: lambda
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !GetAtt 'LambdaLogGroup.Arn'
  LambdaFunction: # needs no monitoring because it is used as a custom resource
    Condition: HasCloudFrontAccessLogWrite
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const { S3Client, GetBucketAclCommand, PutBucketAclCommand } = require('@aws-sdk/client-s3');
          const s3 = new S3Client({apiVersion: '2006-03-01'});
          exports.handler = (event, context, cb) => {
            console.log(`Invoke: ${JSON.stringify(event)}`);
            function done(err) {
              if (err) {
                console.log(`Error: ${JSON.stringify(err)}`);
                response.send(event, context, response.FAILED, {}, event.ResourceProperties.Bucket);
              } else {
                response.send(event, context, response.SUCCESS, {}, event.ResourceProperties.Bucket);
              }
            }
            if (event.RequestType === 'Delete') {
              s3.send(new GetBucketAclCommand({
                Bucket: event.ResourceProperties.Bucket
              }), (err, acl) => {
                if (err) {
                  if (err.name === 'NoSuchBucket') {
                    done();
                  } else {
                    done(err);
                  }
                } else {
                  acl.Grants = acl.Grants.filter(grant => !(grant.Permission === 'FULL_CONTROL' && grant.Grantee.Type === 'CanonicalUser' && grant.Grantee.ID === 'c4c1ede66af53448b93c283ce9448c4ba468c9432aa01d700d3878632f77d2d0'));
                  s3.send(new PutBucketAclCommand({
                    Bucket: event.ResourceProperties.Bucket,
                    AccessControlPolicy: acl
                  }), done);
                }
              });
            } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {
              // The only attribute that can change is the Bucket which is used as the physical id. If Bucket changes, a DELETE call is received during CloudFormation's cleanup.
              s3.send(new GetBucketAclCommand({
                Bucket: event.ResourceProperties.Bucket
              }), (err, acl) => {
                if (err) {
                  done(err);
                } else {
                  acl.Grants.push({
                    Grantee: {
                      DisplayName: 'awslogsdelivery+s3_us-east-1',
                      ID: 'c4c1ede66af53448b93c283ce9448c4ba468c9432aa01d700d3878632f77d2d0',
                      Type: 'CanonicalUser'
                    },
                    Permission: 'FULL_CONTROL'
                  });
                  s3.send(new PutBucketAclCommand({
                    Bucket: event.ResourceProperties.Bucket,
                    AccessControlPolicy: acl
                  }), done);
                }
              });
            } else {
              cb(new Error(`unsupported RequestType: ${event.RequestType}`));
            }
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'nodejs22.x'
      Timeout: 60
  LambdaLogGroup:
    Condition: HasCloudFrontAccessLogWrite
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  BucketAclCloudFrontAccessLogWrite:
    Condition: HasCloudFrontAccessLogWrite
    Type: 'Custom::BucketAclCloudFrontAccessLogWrite'
    DependsOn:
    - LambdaLogGroup
    - LambdaPolicy
    Version: '1.0'
    Properties:
      Bucket: !Ref Bucket
      ServiceToken: !GetAtt 'LambdaFunction.Arn'
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'state/s3'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  BucketName:
    Description: 'Name of the bucket'
    Value: !Ref Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  BucketDomainName:
    Description: 'Domain name of the bucket.'
    Value: !GetAtt 'Bucket.DomainName'
    Export:
      Name: !Sub '${AWS::StackName}-BucketDomainName'
  BucketRegionalDomainName:
    Description: 'Regional domain name of the bucket.'
    Value: !GetAtt 'Bucket.RegionalDomainName'
    Export:
      Name: !Sub '${AWS::StackName}-BucketRegionalDomainName'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Description: 'Origin access identity for secure CloudFront access.'
    Value: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontOriginAccessIdentity'
