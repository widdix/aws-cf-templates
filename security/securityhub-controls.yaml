---
# Copyright 2022 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: Manage Security Hub controls when enabling security hub and standards via administrator account, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Controls Parameters'
      Parameters:
      - DisableCIS120Controls
      - DisableCIS140Controls
      - DisableFSBP100Controls
    - Label:
        default: 'Operational Parameters'
      Parameters:
      - LogsRetentionInDays
    - Label:
        default: 'Permission Parameters'
      Parameters:
      - PermissionsBoundary
Parameters:
  DisableCIS120Controls:
    Description: 'CIS AWS Foundations Benchmark standard v1.2.0 cotrols to disable (e.g., 1.14,1.20).'
    Type: CommaDelimitedList
    Default: ''
  DisableCIS140Controls:
    Description: 'CIS AWS Foundations Benchmark standard v1.4.0 cotrols to disable (e.g., 1.6,1.17).'
    Type: CommaDelimitedList
    Default: ''
  DisableFSBP100Controls:
    Description: 'AWS Foundational Security Best Practices v1.0.0 cotrols to disable (e.g., GuardDuty.1,EC2.7,EC2.9,CloudTrail.2).'
    Type: CommaDelimitedList
    Default: ''
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  PermissionsBoundary:
    Description: 'Optional ARN for a policy that will be used as the permission boundary for all roles created by this template.'
    Type: String
    Default: ''
Conditions:
  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, '']]
Resources:
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundary, !Ref 'AWS::NoValue']
      Policies:
      - PolicyName: iam
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'securityhub:UpdateStandardsControl'
            Resource: !Sub 'arn:${AWS::Partition}:securityhub:${AWS::Region}:${AWS::AccountId}:hub/default'
  LambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
      - !Ref LambdaRole
      PolicyName: lambda
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !GetAtt 'LambdaLogGroup.Arn'
  LambdaFunction: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const { SecurityHubClient, UpdateStandardsControlCommand } = require('@aws-sdk/client-securityhub');
          const securityhub = new SecurityHubClient({apiVersion: '2018-10-26'});
          async function sleep(ms) {
            return new Promise((resolve) => setTimeout(resolve, ms));
          }
          async function update(status, prefix, controls) {
            for (const control of controls) {
              if (control === '') { // for some reasons, an empty parameter list contains one string element of length 0
                continue;
              }
              const arn = prefix + control;
              console.log(`set ${arn} to ${status}`);
              const params = {
                StandardsControlArn: arn,
                ControlStatus: status
              };
              if (status === 'DISABLED') {
                params.DisabledReason = 'Disabled by aws-cf-templates';
              }
              await securityhub.send(new UpdateStandardsControlCommand(params));
              await sleep(1000); // avoid rate limit
            }
          }
          async function process(event) {
            if (event.RequestType === 'Delete') {
              await update('ENABLED', event.ResourceProperties.Prefix, event.ResourceProperties.Controls);
            } else if (event.RequestType === 'Update') {
              const added = [];
              const removed = [];
              for (const control of event.OldResourceProperties.Controls) {
                if (event.ResourceProperties.Controls.find(c => c === control) === undefined) {
                  removed.push(control);
                }
              }
              for (const control of event.ResourceProperties.Controls) {
                if (event.OldResourceProperties.Controls.find(c => c === control) === undefined) {
                  added.push(control);
                }
              }
              await update('ENABLED', event.OldResourceProperties.Prefix, removed);
              await update('DISABLED', event.ResourceProperties.Prefix, added);
            } else if (event.RequestType === 'Create') {
              await update('DISABLED', event.ResourceProperties.Prefix, event.ResourceProperties.Controls);
            } else {
              throw new Error(`unsupported RequestType: ${event.RequestType}`);
            }
          }
          exports.handler = function(event, context) {
            console.log(`Invoke: ${JSON.stringify(event)}`);
            process(event)
              .then(() => {
                response.send(event, context, response.SUCCESS, {}, event.LogicalResourceId);
              })
              .catch((err) => {
                console.log(`Error: ${JSON.stringify(err)}`);
                response.send(event, context, response.FAILED, {}, event.LogicalResourceId);
              });
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'nodejs22.x'
      Timeout: 60
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  CIS120:
    Type: 'Custom::CIS120'
    DependsOn:
    - LambdaLogGroup
    - LambdaPolicy
    Version: '1.0'
    Properties:
      Prefix: !Sub 'arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:control/cis-aws-foundations-benchmark/v/1.2.0/'
      Controls: !Ref DisableCIS120Controls
      ServiceToken: !GetAtt 'LambdaFunction.Arn'
  CIS140:
    Type: 'Custom::CIS140'
    DependsOn:
    - LambdaLogGroup
    - LambdaPolicy
    Version: '1.0'
    Properties:
      Prefix: !Sub 'arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:control/cis-aws-foundations-benchmark/v/1.4.0/'
      Controls: !Ref DisableCIS140Controls
      ServiceToken: !GetAtt 'LambdaFunction.Arn'
  FSBP100:
    Type: 'Custom::FSBP100'
    DependsOn:
    - LambdaLogGroup
    - LambdaPolicy
    Version: '1.0'
    Properties:
      Prefix: !Sub 'arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:control/aws-foundational-security-best-practices/v/1.0.0/'
      Controls: !Ref DisableFSBP100Controls
      ServiceToken: !GetAtt 'LambdaFunction.Arn'
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'security/securityhub-controls'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
