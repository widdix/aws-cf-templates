---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: KMS customer managed CMK for AWS services, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentAlertStack
    - Label:
        default: 'KMS Parameters'
      Parameters:
      - Service
      - KeySpec
      - KeyUsage
Parameters:
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  Service:
    Description: 'Which AWS service is allowed to use this CMK (upper-case names define use-cases)'
    Type: String
    AllowedValues:
    - 'ALL_SERVICES'
    - 'S3_PUBLIC_ACCESS'
    - 'ROUTE53_DNSSEC'
    - 'CLOUDTRAIL'
    - 'CLOUDFRONT'
    - connect
    - dms
    - ssm
    - ec2
    - elasticfilesystem
    - es
    - kinesis
    - kinesisvideo
    - lambda
    - lex
    - redshift
    - rds
    - secretsmanager
    - ses
    - s3
    - importexport
    - sqs
    - workmail
    - workspaces
    - dnssec-route53 # Deprecated since v13. Will be removed in v15. Use ROUTE53_DNSSEC instead.
    - cloudtrail
    - cloudfront-logs
    Default: ALL_SERVICES
  KeySpec:
    Description: 'Specify the type of the CMK.'
    Type: String
    AllowedValues:
    - SYMMETRIC_DEFAULT
    - RSA_2048
    - RSA_3072
    - RSA_4096
    - ECC_NIST_P256
    - ECC_NIST_P384
    - ECC_NIST_P521
    - ECC_SECG_P256K1
    Default: SYMMETRIC_DEFAULT
  KeyUsage:
    Description: 'Which cryptographic operations should the CMK support?'
    Type: String
    AllowedValues:
    - ENCRYPT_DECRYPT
    - SIGN_VERIFY
    Default: ENCRYPT_DECRYPT
Conditions:
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasServiceAllServices: !Equals [!Ref Service, 'ALL_SERVICES']
  HasServiceS3PublicAccess: !Equals [!Ref Service, 'S3_PUBLIC_ACCESS']
  HasServiceRoute53Dnssec: !Or [!Equals [!Ref Service, 'ROUTE53_DNSSEC'], !Equals [!Ref Service, 'dnssec-route53']]
  HasServiceCloudFront: !Equals [!Ref Service, 'CLOUDFRONT']
  HasServiceCloudFrontLogs: !Equals [!Ref Service, 'cloudfront-logs']
  HasServiceCloudTrail: !Equals [!Ref Service, 'CLOUDTRAIL']
  HasService: !Not [!Or [!Condition HasServiceAllServices, !Condition HasServiceS3PublicAccess, !Condition HasServiceRoute53Dnssec, !Condition HasServiceCloudFront, !Condition HasServiceCloudTrail]]
  HasSymmetricKey: !Equals [!Ref KeySpec, 'SYMMETRIC_DEFAULT']
Resources:
  Key:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: 'AWS::KMS::Key'
    Properties:
      EnableKeyRotation: !If [HasSymmetricKey, true, false]
      KeySpec: !Ref KeySpec
      KeyUsage: !Ref KeyUsage
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - !If
          - HasService
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Encrypt'
            - 'kms:Decrypt'
            - 'kms:ReEncrypt*'
            - 'kms:GenerateDataKey*'
            - 'kms:CreateGrant'
            - 'kms:ListGrants'
            - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub '${Service}.${AWS::Region}.amazonaws.com'
          - !Ref 'AWS::NoValue'
        - !If
          - HasServiceAllServices
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Encrypt'
            - 'kms:Decrypt'
            - 'kms:ReEncrypt*'
            - 'kms:GenerateDataKey*'
            - 'kms:CreateGrant'
            - 'kms:ListGrants'
            - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
          - !Ref 'AWS::NoValue'
        - !If
          - HasServiceS3PublicAccess
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Decrypt'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
          - !Ref 'AWS::NoValue'
        - !If
          - HasServiceRoute53Dnssec
          - Effect: Allow
            Principal:
              Service: 'dnssec-route53.amazonaws.com'
            Action:
            - 'kms:DescribeKey'
            - 'kms:GetPublicKey'
            - 'kms:Sign'
            Resource: '*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasServiceRoute53Dnssec
          - Effect: Allow
            Principal:
              Service: 'dnssec-route53.amazonaws.com'
            Action:
            - 'kms:CreateGrant'
            Resource: '*'
            Condition:
              Bool:
                'kms:GrantIsForAWSResource': true
          - !Ref 'AWS::NoValue'
        - !If
          - HasServiceCloudTrail
          - Effect: Allow # https://docs.aws.amazon.com/awscloudtrail/latest/userguide/create-kms-key-policy-for-cloudtrail.html#create-kms-key-policy-for-cloudtrail-encrypt
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action:
            - 'kms:GenerateDataKey*'
            Resource: '*'
            Condition:
              StringLike:
                'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasServiceCloudFront
          - Effect: Allow # https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Action:
            - 'kms:Decrypt'
            Resource: '*'
            Condition:
              StringLike:
                'aws:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasServiceCloudFrontLogs
          - Effect: Allow # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#AccessLogsKMSPermissions
            Principal:
              Service: 'delivery.logs.amazonaws.com'
            Action:
            - 'kms:GenerateDataKey*'
            - 'kms:Decrypt'
            Resource: '*'
          - !Ref 'AWS::NoValue'
  KeyAlias:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}'
      TargetKeyId: !Ref Key
  DeletionNotification:
    Condition: HasAlertTopic
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
        - 'aws.kms'
        'detail-type':
        - 'AWS API Call via CloudTrail'
        resources:
        - !GetAtt Key.Arn
        detail:
          eventSource:
          - 'kms.amazonaws.com'
          'eventName':
          - ScheduleKeyDeletion
          - DisableKey
      State: ENABLED
      Targets:
      - Arn: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
        Id: rule
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'security/kms-key'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  KeyId:
    Description: 'Key id.'
    Value: !Ref Key
    Export:
      Name: !Sub '${AWS::StackName}-KeyId'
  KeyArn:
    Description: 'Key ARN.'
    Value: !GetAtt 'Key.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-KeyArn'
