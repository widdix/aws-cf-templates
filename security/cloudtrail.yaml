---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: CloudTrail across all regions, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'CloudTrail Parameters'
      Parameters:
      - ParentAlertStack
      - ParentKmsKeyStack
      - CloudWatchLogsRetentionInDays
      - ExternalTrailBucket
      - LogFilePrefix
      - S3DataEvents
    - Label:
        default: 'CIS alarms Parameters'
      Parameters:
      - DisableUnauthorizedOperationAlarm
      - DisableNonMfaConsoleLoginAlarm
      - DisableRootUserActivityAlarm
      - DisableIamPolicyChangeAlarm
      - DisableCloudTrailConfigChangeAlarm
      - DisableManagementConsoleAuthFailureAlarm
      - DisableDeletingKmsCmkAlarm
      - DisableS3BucketPolicyChangeAlarm
      - DisableConfigChangeAlarm
      - DisableSecurityGroupChangeAlarm
      - DisableNaclChangeAlarm
      - DisableNetworkGatewayChangeAlarm
      - DisableRouteTableChangeAlarm
      - DisableVpcChangeAlarm
      - DisableOrganizationsChangeAlarm
    - Label:
        default: 'Permission Parameters'
      Parameters:
      - PermissionsBoundary
Parameters:
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ParentKmsKeyStack:
    Description: 'Optional Stack name of parent KMS key stack based on security/kms-key.yaml template.'
    Type: String
    Default: ''
  PermissionsBoundary:
    Description: 'Optional ARN for a policy that will be used as the permission boundary for all roles created by this template.'
    Type: String
    Default: ''
  CloudWatchLogsRetentionInDays:
    Description: 'The number of days log events are kept in CloudWatch Logs'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  ExternalTrailBucket:
    Description: 'Optional The name of the Amazon S3 bucket where CloudTrail publishes log files. If you leave this empty, the Amazon S3 bucket is created for you.'
    Type: String
    Default: ''
  LogFilePrefix:
    Description: 'Optional The log file prefix.'
    Type: String
    Default: ''
  DisableUnauthorizedOperationAlarm:
    Description: 'Disable CIS 3.1 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableNonMfaConsoleLoginAlarm:
    Description: 'Disable CIS 3.2 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableRootUserActivityAlarm:
    Description: 'Disable CIS 3.3 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableIamPolicyChangeAlarm:
    Description: 'Disable CIS 3.4 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableCloudTrailConfigChangeAlarm:
    Description: 'Disable CIS 3.5 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableManagementConsoleAuthFailureAlarm:
    Description: 'Disable CIS 3.6 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableDeletingKmsCmkAlarm:
    Description: 'Disable CIS 3.7 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableS3BucketPolicyChangeAlarm:
    Description: 'Disable CIS 3.8 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableConfigChangeAlarm:
    Description: 'Disable CIS 3.9 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableSecurityGroupChangeAlarm:
    Description: 'Disable CIS 3.10 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableNaclChangeAlarm:
    Description: 'Disable CIS 3.11 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableNetworkGatewayChangeAlarm:
    Description: 'Disable CIS 3.12 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableRouteTableChangeAlarm:
    Description: 'Disable CIS 3.13 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableVpcChangeAlarm:
    Description: 'Disable CIS 3.14 alarm.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  DisableOrganizationsChangeAlarm:
    Description: 'Disable AVA-01, NET-02, NET-04 alarms (ISO 27001 2022/SOC 2).'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  S3DataEvents:
    Description: 'Record data events of all S3 buckets? (Warning: additional charges apply.)'
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'
Conditions:
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasParentKmsKeyStack: !Not [!Equals [!Ref ParentKmsKeyStack, '']]
  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, '']]
  InternalBucket: !Equals [!Ref ExternalTrailBucket, '']
  ExternalBucket: !Not [!Equals [!Ref ExternalTrailBucket, '']]
  HasLogFilePrefix: !Not [!Equals [!Ref LogFilePrefix, '']]
  IsS3DataEvents: !Equals [!Ref S3DataEvents, 'true']
  HasUnauthorizedOperationAlarm: !And [!Equals [!Ref DisableUnauthorizedOperationAlarm, 'false'], !Condition HasAlertTopic]
  HasNonMfaConsoleLoginAlarm: !And [!Equals [!Ref DisableNonMfaConsoleLoginAlarm, 'false'], !Condition HasAlertTopic]
  HasRootUserActivityAlarm: !And [!Equals [!Ref DisableRootUserActivityAlarm, 'false'], !Condition HasAlertTopic]
  HasIamPolicyChangeAlarm: !And [!Equals [!Ref DisableIamPolicyChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasCloudTrailConfigChangeAlarm: !And [!Equals [!Ref DisableCloudTrailConfigChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasManagementConsoleAuthFailureAlarm: !And [!Equals [!Ref DisableManagementConsoleAuthFailureAlarm, 'false'], !Condition HasAlertTopic]
  HasDeletingKmsCmkAlarm: !And [!Equals [!Ref DisableDeletingKmsCmkAlarm, 'false'], !Condition HasAlertTopic]
  HasS3BucketPolicyChangeAlarm: !And [!Equals [!Ref DisableS3BucketPolicyChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasConfigChangeAlarm: !And [!Equals [!Ref DisableConfigChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasSecurityGroupChangeAlarm: !And [!Equals [!Ref DisableSecurityGroupChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasNaclChangeAlarm: !And [!Equals [!Ref DisableNaclChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasNetworkGatewayChangeAlarm: !And [!Equals [!Ref DisableNetworkGatewayChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasRouteTableChangeAlarm: !And [!Equals [!Ref DisableRouteTableChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasVpcChangeAlarm: !And [!Equals [!Ref DisableVpcChangeAlarm, 'false'], !Condition HasAlertTopic]
  HasOrganizationsChangeAlarm: !And [!Equals [!Ref DisableOrganizationsChangeAlarm, 'false'], !Condition HasAlertTopic]
Resources:
  TrailBucket:
    Condition: InternalBucket
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration: # AWS Foundational Security Best Practices v1.0.0 S3.8
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  TrailBucketPolicy:
    Condition: InternalBucket
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !Sub 'arn:aws:s3:::${TrailBucket}'
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !If [HasLogFilePrefix, !Sub 'arn:aws:s3:::${TrailBucket}/${LogFilePrefix}/AWSLogs/${AWS::AccountId}/*', !Sub 'arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*']
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
        - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource:
          - !GetAtt 'TrailBucket.Arn'
          - !Sub '${TrailBucket.Arn}/*'
          Condition:
            Bool:
              'aws:SecureTransport': false
  TrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref CloudWatchLogsRetentionInDays
  TrailLogGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeRole1
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 'sts:AssumeRole'
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundary, !Ref 'AWS::NoValue']
      Policies:
      - PolicyName: 'cloudtrail-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'TrailLogGroup.Arn'
  TrailTopic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  TrailTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailSNSPolicy
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Resource: !Ref TrailTopic
          Action: 'sns:Publish'
      Topics:
      - !Ref TrailTopic
  Trail:
    Condition: InternalBucket
    DependsOn:
    - TrailBucketPolicy
    - TrailTopicPolicy
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      EventSelectors: !If [IsS3DataEvents, [{DataResources: [{Type: 'AWS::S3::Object', Values: ['arn:aws:s3:::']}], IncludeManagementEvents: true, ReadWriteType: All}], !Ref 'AWS::NoValue']
      KMSKeyId: !If [HasParentKmsKeyStack, {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}-KeyId'}, !Ref 'AWS::NoValue']
      S3BucketName: !Ref TrailBucket
      S3KeyPrefix: !Ref LogFilePrefix
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt 'TrailLogGroup.Arn'
      CloudWatchLogsRoleArn: !GetAtt 'TrailLogGroupRole.Arn'
      SnsTopicName: !GetAtt 'TrailTopic.TopicName'
  ExternalTrail:
    Condition: ExternalBucket
    DependsOn:
    - TrailTopicPolicy
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      EventSelectors: !If [IsS3DataEvents, [{DataResources: [{Type: 'AWS::S3::Object', Values: ['arn:aws:s3:::']}], IncludeManagementEvents: true, ReadWriteType: All}], !Ref 'AWS::NoValue']
      KMSKeyId: !If [HasParentKmsKeyStack, {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}-KeyId'}, !Ref 'AWS::NoValue']
      S3BucketName: !Ref ExternalTrailBucket
      S3KeyPrefix: !Ref LogFilePrefix
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt 'TrailLogGroup.Arn'
      CloudWatchLogsRoleArn: !GetAtt 'TrailLogGroupRole.Arn'
      SnsTopicName: !GetAtt 'TrailTopic.TopicName'
  UnauthorizedOperationMetricFilter: # CIS 3.1
    Condition: HasUnauthorizedOperationAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*")}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'UnauthorizedOperationCount'
  UnauthorizedOperationAlarm:
    Condition: HasUnauthorizedOperationAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: unauthorized API calls detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: UnauthorizedOperationCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  NonMfaConsoleLoginMetricFilter: # CIS 3.2
    Condition: HasNonMfaConsoleLoginAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = "ConsoleLogin") && ($.additionalEventData.MFAUsed != "Yes")}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'NonMfaConsoleLoginCount'
  NonMfaConsoleLoginAlarm:
    Condition: HasNonMfaConsoleLoginAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: Management Console sign-in without MFA detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: NonMfaConsoleLoginCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  RootUserActivityMetricFilter: # CIS 1.1 & 3.3
    Condition: HasRootUserActivityAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{$.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent"}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'RootUserActivityCount'
  RootUserActivityAlarm:
    Condition: HasRootUserActivityAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: usage of root account/user detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: RootUserActivityCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  IamPolicyChangeMetricFilter: # CIS 3.4
    Condition: HasIamPolicyChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'IamPolicyChangeCount'
  IamPolicyChangeAlarm:
    Condition: HasIamPolicyChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: IAM policy changes detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: IamPolicyChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  CloudTrailConfigChangeMetricFilter: # CIS 3.5
    Condition: HasCloudTrailConfigChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'CloudTrailConfigChangeCount'
  CloudTrailConfigChangeAlarm:
    Condition: HasCloudTrailConfigChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: CloudTrail configuration changes detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: CloudTrailConfigChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  ManagementConsoleAuthFailureMetricFilter: # CIS 3.6
    Condition: HasManagementConsoleAuthFailureAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication")}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'ManagementConsoleAuthFailureCount'
  ManagementConsoleAuthFailureAlarm:
    Condition: HasManagementConsoleAuthFailureAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: Management Console authentication failures detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: ManagementConsoleAuthFailureCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  DeletingKmsCmkMetricFilter: # CIS 3.7
    Condition: HasDeletingKmsCmkAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'DeletingKmsCmkCount'
  DeletingKmsCmkAlarm:
    Condition: HasDeletingKmsCmkAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: disabling or scheduled deletion of customer created CMKs detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: DeletingKmsCmkCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  S3BucketPolicyChangeMetricFilter: # CIS 3.8
    Condition: HasS3BucketPolicyChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication))}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'S3BucketPolicyChangeCount'
  S3BucketPolicyChangeAlarm:
    Condition: HasS3BucketPolicyChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail:  S3 bucket policy changes detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: S3BucketPolicyChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  ConfigChangeMetricFilter: # CIS 3.9
    Condition: HasConfigChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventSource = config.amazonaws.com) && (($.eventName = StopConfigurationRecorder) || ($.eventName = DeleteDeliveryChannel) || ($.eventName = PutDeliveryChannel) || ($.eventName = PutConfigurationRecorder))}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'ConfigChangeCount'
  ConfigChangeAlarm:
    Condition: HasConfigChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: AWS Config configuration changes detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: ConfigChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  SecurityGroupChangeMetricFilter: # CIS 3.10
    Condition: HasSecurityGroupChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'SecurityGroupChangeCount'
  SecurityGroupChangeAlarm:
    Condition: HasSecurityGroupChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: security group changes detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: SecurityGroupChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  NaclChangeMetricFilter: # CIS 3.11
    Condition: HasNaclChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'NaclChangeCount'
  NaclChangeAlarm:
    Condition: HasNaclChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: changes to Network Access Control List (NACL) detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: NaclChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  NetworkGatewayChangeMetricFilter: # CIS 3.12
    Condition: HasNetworkGatewayChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'NetworkGatewayChangeChangeCount'
  NetworkGatewayChangeAlarm:
    Condition: HasNetworkGatewayChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: changes to network gateways detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: NetworkGatewayChangeChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  RouteTableChangeMetricFilter: # CIS 3.13
    Condition: HasRouteTableChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'RouteTableChangeCount'
  RouteTableChangeAlarm:
    Condition: HasRouteTableChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: changes to route tables detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: RouteTableChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  VpcChangeMetricFilter: # CIS 3.14
    Condition: HasVpcChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'VpcChangeCount'
  VpcChangeAlarm:
    Condition: HasVpcChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: changes to VPCs detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: VpcChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
  OrganizationsChangeMetricFilter: # ISO 27001 2022; SOC 2 (AVA-01, NET-02, NET-04)
    Condition: HasOrganizationsChangeAlarm
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      FilterPattern: '{($.eventSource = organizations.amazonaws.com) && (($.eventName = AcceptHandshake) || ($.eventName = AttachPolicy) || ($.eventName = CreateAccount) || ($.eventName = CreateOrganizationalUnit) || ($.eventName = CreatePolicy) || ($.eventName = DeclineHandshake) || ($.eventName = DeleteOrganization) || ($.eventName = DeleteOrganizationalUnit) || ($.eventName = DeletePolicy) || ($.eventName = DetachPolicy) || ($.eventName = DisablePolicyType) || ($.eventName = EnablePolicyType) || ($.eventName = InviteAccountToOrganization) || ($.eventName = LeaveOrganization) || ($.eventName = MoveAccount) || ($.eventName = RemoveAccountFromOrganization) || ($.eventName = UpdatePolicy) || ($.eventName = UpdateOrganizationalUnit))}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: !Ref 'AWS::StackName'
        MetricName: 'OrganizationsChangeCount'
  OrganizationsChangeAlarm:
    Condition: HasOrganizationsChangeAlarm
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'CloudTrail: changes to Organizations detected'
      Namespace: !Ref 'AWS::StackName'
      MetricName: OrganizationsChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      TreatMissingData: notBreaching
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'security/cloudtrail'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
